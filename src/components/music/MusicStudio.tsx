import { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { AnimatedCard } from '@/components/ui/animated-card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { AudioVisualizer } from '@/components/ui/audio-visualizer';
import { useAuth } from '@/components/auth/AuthProvider';
import { useMusicGeneration, GenerationRequest } from '@/hooks/useMusicGeneration';
import ModelSelector, { ModelType } from '@/components/ui/model-selector';
import AdminPanel from '@/components/ui/admin-panel';
import { supabase } from '@/integrations/supabase/client';
import { useRealtimeUpdates } from '@/hooks/useRealtimeUpdates';
import GenerationProgress from './GenerationProgress';
import { useToast } from '@/hooks/use-toast';
import { Wand2, Sparkles, Music2, Download, Share2, Shuffle, Zap, Settings, Mic, Volume2, FileText } from 'lucide-react';
import AdvancedMusicStudio from './AdvancedMusicStudio';

interface AudioPlayerProps {
  src: string;
  title: string;
}

// Elegant audio player component
function AudioPlayer({ src, title }: AudioPlayerProps) {
  return (
    <motion.div 
      className="glassmorphism p-6 rounded-xl border border-white/10"
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <div className="flex items-center justify-between mb-4">
        <h4 className="text-lg font-medium gradient-text">{title}</h4>
        <div className="flex items-center gap-2">
          <Button size="sm" variant="ghost" className="hover:bg-white/10 border border-white/20">
            <Download className="h-4 w-4" />
          </Button>
          <Button size="sm" variant="ghost" className="hover:bg-white/10 border border-white/20">
            <Share2 className="h-4 w-4" />
          </Button>
        </div>
      </div>
      <audio controls className="w-full modern-audio-player">
        <source src={src} type="audio/mpeg" />
        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—É–¥–∏–æ —ç–ª–µ–º–µ–Ω—Ç.
      </audio>
    </motion.div>
  );
}

export default function MusicStudio() {
  const [prompt, setPrompt] = useState('');
  const [provider, setProvider] = useState<'mureka' | 'suno' | 'test'>('suno');
  const [model, setModel] = useState<ModelType>('V4_5');
  const [style, setStyle] = useState('pop');
  const [duration, setDuration] = useState([60]);
  const [instrumental, setInstrumental] = useState(false);
  const [lyrics, setLyrics] = useState('');
  const [showAdmin, setShowAdmin] = useState(false);
  const [isEnhancing, setIsEnhancing] = useState(false);
  const [showAdvanced, setShowAdvanced] = useState(false);
  const [isGeneratingLyrics, setIsGeneratingLyrics] = useState(false);
  
  const { user } = useAuth();
  const { generateMusic, resetGeneration, isGenerating, currentJob } = useMusicGeneration();
  const { toast } = useToast();
  
  // Real-time updates for generation jobs
  useRealtimeUpdates({
    onJobUpdate: () => {
      console.log('Generation job update detected');
    }
  });

  // –ú–∞—Å—Å–∏–≤—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
  const moods = ['—ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è', '–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–∞—è', '—Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è', '–¥—Ä–∞–π–≤–æ–≤–∞—è', '—Å–ø–æ–∫–æ–π–Ω–∞—è', '–º–∏—Å—Ç–∏—á–µ—Å–∫–∞—è', '–≤–µ—Å–µ–ª–∞—è', '–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–∞—è'];
  const instruments = ['—Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä—ã', '–≥–∏—Ç–∞—Ä–∞', '–ø–∏–∞–Ω–∏–Ω–æ', '—Å–∫—Ä–∏–ø–∫–∞', '—Å–∞–∫—Å–æ—Ñ–æ–Ω', '–±–∞—Ä–∞–±–∞–Ω—ã', '–±–∞—Å-–≥–∏—Ç–∞—Ä–∞', '—Ñ–ª–µ–π—Ç–∞'];
  const vocals = ['–º—É–∂—Å–∫–æ–π –≤–æ–∫–∞–ª', '–∂–µ–Ω—Å–∫–∏–π –≤–æ–∫–∞–ª', '—Ö–æ—Ä', '—Ä—ç–ø', '—Ñ–∞–ª—å—Ü–µ—Ç', '–Ω–∏–∑–∫–∏–π –±–∞—Å'];
  const themes = ['–æ –ª—é–±–≤–∏', '–æ –º–µ—á—Ç–∞—Ö', '–æ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è—Ö', '–æ –¥—Ä—É–∂–±–µ', '–æ —Å–≤–æ–±–æ–¥–µ', '–æ –ø—Ä–∏—Ä–æ–¥–µ', '–æ –≥–æ—Ä–æ–¥–µ', '–æ –±—É–¥—É—â–µ–º'];
  const tempos = ['–±—ã—Å—Ç—Ä—ã–π', '–º–µ–¥–ª–µ–Ω–Ω—ã–π', '—Å—Ä–µ–¥–Ω–∏–π', '–ø–µ—Ä–µ–º–µ–Ω—á–∏–≤—ã–π'];

  const generateRandomPrompt = () => {
    const mood = moods[Math.floor(Math.random() * moods.length)];
    const instrument = instruments[Math.floor(Math.random() * instruments.length)];
    const vocal = vocals[Math.floor(Math.random() * vocals.length)];
    const theme = themes[Math.floor(Math.random() * themes.length)];
    const tempo = tempos[Math.floor(Math.random() * tempos.length)];
    
    const randomPrompt = `${mood} –ø–µ—Å–Ω—è ${theme} —Å ${instrument} –∏ ${vocal}, ${tempo} —Ç–µ–º–ø`;
    setPrompt(randomPrompt);
  };

  const enhancePrompt = async () => {
    if (!prompt.trim()) {
      generateRandomPrompt();
      return;
    }
    
    setIsEnhancing(true);
    
    try {
      // Try to use the new style-enhance edge function
      const { data, error } = await supabase.functions.invoke('style-enhance', {
        body: { content: prompt }
      });

      if (data?.success && data.enhancedStyle) {
        setPrompt(data.enhancedStyle);
        toast({
          title: "–ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò!",
          description: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥: ${data.method || 'suno_api'}`
        });
      } else {
        throw new Error(data?.error || 'Enhancement failed');
      }
    } catch (error) {
      console.error('Enhancement error:', error);
      
      // Fallback to local enhancement
      const enhancements = [
        '—Å –±–æ–≥–∞—Ç–æ–π –∞—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–æ–π –∏ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–º –∑–≤—É—á–∞–Ω–∏–µ–º',
        '—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å—Ç—É–¥–∏–π–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –∏ –º–∞—Å—Ç–µ—Ä–∏–Ω–≥–æ–º',
        '—Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–∞—á–µ–π –∏ –¥–∏–Ω–∞–º–∏—á–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏',
        '—Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏',
        '—Å –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –º–µ–ª–æ–¥–∏—á–µ—Å–∫–∏–º –∫—Ä—é–∫–æ–º –∏ –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–º–∏ –∞–∫–∫–æ—Ä–¥–∞–º–∏',
        '—Å –≥–ª—É–±–æ–∫–∏–º –±–∞—Å–æ–º –∏ —á–µ—Ç–∫–æ–π —Ä–∏—Ç–º-—Å–µ–∫—Ü–∏–µ–π',
        '—Å –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω—ã–º–∏ –ø–æ–¥–ª–æ–∂–∫–∞–º–∏ –∏ —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü–∏–µ–π',
        '—Å –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω—ã–º –∑–≤—É—á–∞–Ω–∏–µ–º –∏ –æ—Ä–∫–µ—Å—Ç—Ä–æ–≤—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏'
      ];
      
      const enhancement = enhancements[Math.floor(Math.random() * enhancements.length)];
      setPrompt(prev => `${prev}, ${enhancement}`);
      
      toast({
        title: "–ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ",
        description: "–î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏"
      });
    }
    
    setIsEnhancing(false);
  };

  const generateLyrics = async () => {
    if (!prompt.trim()) {
      toast({
        title: "–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        description: "–û–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Ä–∏–∫–∏",
        variant: "destructive"
      });
      return;
    }

    setIsGeneratingLyrics(true);

    try {
      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Ä–∏–∫–∏ —Å —Ç–µ–≥–∞–º–∏ Suno AI
      const lyricsPrompt = `–°–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ª–∏—Ä–∏–∫—É –¥–ª—è ${style} –ø–µ—Å–Ω–∏ –Ω–∞ —Ç–µ–º—É: "${prompt}". 
      
–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: [Verse], [Chorus], [Verse], [Chorus], [Bridge], [Chorus], [Outro]
- –Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π
- –°—Ç–∏–ª—å: ${style}
- –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—é: ${prompt}
- –î–æ–±–∞–≤—å —Ç–µ–≥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Suno AI –≤ –Ω–∞—á–∞–ª–µ
- –†–∏—Ñ–º—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–º–∏
- –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—ç—Ç–∏–∫—É

–ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å —Ç–µ–≥–∞–º–∏:
[Intro]
[Verse]
—Ç–µ–∫—Å—Ç –∫—É–ø–ª–µ—Ç–∞...
[Chorus]  
—Ç–µ–∫—Å—Ç –ø—Ä–∏–ø–µ–≤–∞...

–°–æ–∑–¥–∞–π –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ —Ç–µ–≥–∞–º–∏.`;

      const { data, error } = await supabase.functions.invoke('generate-lyrics', {
        body: { 
          prompt: lyricsPrompt,
          style: style,
          language: 'russian',
          structure: 'verse-chorus'
        }
      });

      if (data?.success && data.lyrics?.content) {
        setLyrics(data.lyrics.content);
        toast({
          title: "üé§ –õ–∏—Ä–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!",
          description: "–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò"
        });
      } else {
        throw new Error(data?.error || error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ä–∏–∫—É');
      }
    } catch (error) {
      console.error('Lyrics generation error:', error);
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Ä–∏–∫–∏",
        description: error.message || "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
        variant: "destructive"
      });
    }

    setIsGeneratingLyrics(false);
  };

  const handleGenerate = async () => {
    if (!prompt.trim()) {
      return;
    }

    if (!user) {
      return;
    }

    const request: GenerationRequest = {
      prompt,
      provider,
      model,
      style,
      duration: duration[0],
      instrumental,
      lyrics: instrumental ? undefined : lyrics
    };

    try {
      await generateMusic(request);
    } catch (error) {
      console.error('Generation error:', error);
      // Error is already handled in the hook
    }
  };

  const handleRetry = () => {
    if (currentJob) {
      resetGeneration();
      // Small delay to ensure state is reset
      setTimeout(() => {
        handleGenerate();
      }, 100);
    }
  };

  // Update model when provider changes
  const handleProviderChange = (newProvider: 'mureka' | 'suno' | 'test') => {
    setProvider(newProvider);
    // Auto-select best model for provider
    if (newProvider === 'suno') {
      setModel('V4_5');
    } else if (newProvider === 'mureka') {
      setModel('mureka-v6');
    } else {
      setModel('test');
    }
  };

  if (showAdvanced) {
    return <AdvancedMusicStudio />;
  }

  return (
    <motion.div 
      className="min-h-screen bg-gradient-to-br from-background via-background/95 to-background/90 p-4 md:p-6"
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.6 }}
    >
      <div className="max-w-5xl mx-auto space-y-8">
        {/* Header Section */}
        <motion.div 
          className="text-center space-y-4"
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6, delay: 0.1 }}
        >
          <div className="inline-flex items-center gap-3 px-6 py-3 rounded-full glassmorphism border border-white/10">
            <Music2 className="h-6 w-6 text-primary" />
            <h1 className="text-2xl font-medium gradient-text">–°—Ç—É–¥–∏—è –ò–ò</h1>
            <AudioVisualizer isPlaying={isGenerating} barCount={5} className="h-6" />
          </div>
          <p className="text-muted-foreground max-w-2xl mx-auto">
            –°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –º—É–∑—ã–∫—É —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞. 
            –ü—Ä–æ—Å—Ç–æ –æ–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ç—Ä–µ–∫ –∏ –ø–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
          </p>
        </motion.div>

        {/* Admin Panel - Hidden by default */}
        <AnimatePresence>
          {showAdmin && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: 'auto' }}
              exit={{ opacity: 0, height: 0 }}
              transition={{ duration: 0.3 }}
            >
              <AdminPanel />
            </motion.div>
          )}
        </AnimatePresence>

        {/* Main Studio Interface */}
        <AnimatedCard 
          variant="glass" 
          className="backdrop-blur-xl border-white/10 overflow-hidden"
        >
          <div className="p-8 space-y-8">
            {!currentJob ? (
              <motion.div 
                className="space-y-8"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ duration: 0.6, delay: 0.2 }}
              >
                {/* Creative Prompt Section */}
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <Label className="text-lg font-medium">–û–ø–∏—à–∏—Ç–µ –≤–∞—à —Ç—Ä–µ–∫</Label>
                    <div className="flex gap-2">
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={generateRandomPrompt}
                        className="hover:bg-white/10 border border-white/20"
                      >
                        <Shuffle className="h-4 w-4 mr-2" />
                        –°–ª—É—á–∞–π–Ω—ã–π
                      </Button>
                      <Button
                        type="button"
                        variant="ghost"
                        size="sm"
                        onClick={enhancePrompt}
                        disabled={isEnhancing}
                        className="hover:bg-white/10 border border-white/20"
                      >
                        <Zap className={`h-4 w-4 mr-2 ${isEnhancing ? 'animate-pulse text-yellow-400' : ''}`} />
                        {isEnhancing ? '–£–ª—É—á—à–∞—é...' : '–£–ª—É—á—à–∏—Ç—å —Å –ò–ò'}
                      </Button>
                    </div>
                  </div>
                  
                  <motion.div
                    whileFocus={{ scale: 1.02 }}
                    transition={{ type: "spring", stiffness: 300, damping: 30 }}
                  >
                    <Textarea
                      id="prompt"
                      placeholder="–≠–Ω–µ—Ä–≥–∏—á–Ω–∞—è –ø–æ–ø-–ø–µ—Å–Ω—è –æ –ª–µ—Ç–µ —Å —è—Ä–∫–∏–º–∏ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞–º–∏ –∏ –∂–µ–Ω—Å–∫–∏–º –≤–æ–∫–∞–ª–æ–º..."
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      rows={3}
                      className="glassmorphism border-white/20 bg-white/5 backdrop-blur-sm resize-none text-lg"
                    />
                  </motion.div>
                </div>

                {/* Settings Grid */}
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {/* Provider Selection */}
                  <motion.div 
                    className="space-y-3"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.5, delay: 0.3 }}
                  >
                    <Label className="text-sm font-medium text-muted-foreground">–ò–ò –ú–æ–¥–µ–ª—å</Label>
                    <Select value={provider} onValueChange={handleProviderChange}>
                      <SelectTrigger className="glassmorphism border-white/20 bg-white/5">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="glassmorphism border-white/20 bg-background/95 backdrop-blur-xl">
                        <SelectItem value="suno">
                          <div className="flex items-center gap-2">
                            <Sparkles className="h-4 w-4 text-yellow-400" />
                            Suno AI
                          </div>
                        </SelectItem>
                        <SelectItem value="mureka">
                          <div className="flex items-center gap-2">
                            <Music2 className="h-4 w-4 text-blue-400" />
                            Mureka AI
                          </div>
                        </SelectItem>
                        <SelectItem value="test">
                          <div className="flex items-center gap-2">
                            <Zap className="h-4 w-4 text-green-400" />
                            –¢–µ—Å—Ç
                          </div>
                        </SelectItem>
                      </SelectContent>
                    </Select>
                  </motion.div>

                  {/* Style Selection */}
                  <motion.div 
                    className="space-y-3"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.5, delay: 0.4 }}
                  >
                    <Label className="text-sm font-medium text-muted-foreground">–ñ–∞–Ω—Ä</Label>
                    <Select value={style} onValueChange={setStyle}>
                      <SelectTrigger className="glassmorphism border-white/20 bg-white/5">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent className="glassmorphism border-white/20 bg-background/95 backdrop-blur-xl">
                        <SelectItem value="pop">üéµ –ü–æ–ø</SelectItem>
                        <SelectItem value="rock">üé∏ –†–æ–∫</SelectItem>
                        <SelectItem value="electronic">üéõÔ∏è –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è</SelectItem>
                        <SelectItem value="hip-hop">üé§ –•–∏–ø-—Ö–æ–ø</SelectItem>
                        <SelectItem value="classical">üéº –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è</SelectItem>
                        <SelectItem value="jazz">üé∫ –î–∂–∞–∑</SelectItem>
                        <SelectItem value="ambient">üåä –≠–º–±–∏–µ–Ω—Ç</SelectItem>
                        <SelectItem value="folk">ü™ï –§–æ–ª–∫</SelectItem>
                      </SelectContent>
                    </Select>
                  </motion.div>

                  {/* Duration Control */}
                  <motion.div 
                    className="space-y-3"
                    initial={{ opacity: 0, x: -20 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.5, delay: 0.5 }}
                  >
                    <Label className="text-sm font-medium text-muted-foreground">
                      –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration[0]}—Å
                    </Label>
                    <div className="glassmorphism p-4 rounded-lg border border-white/20 bg-white/5">
                      <Slider
                        value={duration}
                        onValueChange={setDuration}
                        max={180}
                        min={30}
                        step={15}
                        className="w-full"
                      />
                      <div className="flex justify-between text-xs text-muted-foreground mt-2">
                        <span>30—Å</span>
                        <span>180—Å</span>
                      </div>
                    </div>
                  </motion.div>
                </div>

                {/* Model Selector */}
                <motion.div
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: 0.6 }}
                >
                  <ModelSelector
                    value={model}
                    onChange={setModel}
                    provider={provider}
                    showDetails={true}
                  />
                </motion.div>

                {/* Advanced Options */}
                <motion.div 
                  className="space-y-4"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: 0.7 }}
                >
                  <div className="flex items-center justify-between p-4 glassmorphism rounded-lg border border-white/20 bg-white/5">
                    <div className="flex items-center gap-3">
                      <Mic className="h-5 w-5 text-muted-foreground" />
                      <div>
                        <Label className="text-sm font-medium">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è</Label>
                        <p className="text-xs text-muted-foreground">–¢—Ä–µ–∫ –±–µ–∑ –≤–æ–∫–∞–ª–∞</p>
                      </div>
                    </div>
                    <Switch
                      checked={instrumental}
                      onCheckedChange={setInstrumental}
                    />
                  </div>

                  <AnimatePresence>
                    {!instrumental && (
                      <motion.div
                        initial={{ opacity: 0, height: 0 }}
                        animate={{ opacity: 1, height: 'auto' }}
                        exit={{ opacity: 0, height: 0 }}
                        transition={{ duration: 0.3 }}
                        className="space-y-3"
                      >
                        <div className="flex items-center justify-between">
                          <Label className="text-sm font-medium text-muted-foreground">
                            –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                          </Label>
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            onClick={generateLyrics}
                            disabled={isGeneratingLyrics || !prompt.trim()}
                            className="hover:bg-white/10 border border-white/20"
                          >
                            <FileText className={`h-4 w-4 mr-2 ${isGeneratingLyrics ? 'animate-pulse text-blue-400' : ''}`} />
                            {isGeneratingLyrics ? '–ì–µ–Ω–µ—Ä–∏—Ä—É—é...' : '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –ò–ò'}
                          </Button>
                        </div>
                        <Textarea
                          placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –ò–ò' –¥–ª—è –∞–≤—Ç–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏..."
                          value={lyrics}
                          onChange={(e) => setLyrics(e.target.value)}
                          rows={6}
                          className="glassmorphism border-white/20 bg-white/5 backdrop-blur-sm resize-none"
                        />
                      </motion.div>
                    )}
                  </AnimatePresence>
                </motion.div>

                {/* Generate Button */}
                <motion.div 
                  className="flex flex-col sm:flex-row gap-4"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: 0.8 }}
                >
                  <motion.div
                    className="flex-1"
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                  >
                    <Button 
                      onClick={handleGenerate} 
                      disabled={isGenerating || !prompt.trim()}
                      className="w-full h-14 text-lg font-medium gradient-primary hover:shadow-glow transition-all duration-300"
                      size="lg"
                    >
                      <div className="flex items-center gap-3">
                        {isGenerating ? (
                          <>
                            <Volume2 className="h-5 w-5 animate-pulse" />
                            <span>–°–æ–∑–¥–∞—é –º—É–∑—ã–∫—É...</span>
                            <AudioVisualizer isPlaying={true} barCount={4} className="h-5" />
                          </>
                        ) : (
                          <>
                            <Sparkles className="h-5 w-5" />
                            <span>–°–æ–∑–¥–∞—Ç—å –º—É–∑—ã–∫—É</span>
                          </>
                        )}
                      </div>
                    </Button>
                  </motion.div>

                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowAdvanced(true)}
                    className="hover:bg-white/10 border border-white/20"
                  >
                    <Settings className="h-4 w-4 mr-2" />
                    –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–µ–∂–∏–º
                  </Button>
                </motion.div>

                {/* Quick Actions */}
                <motion.div 
                  className="flex justify-center gap-2"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: 1 }}
                  transition={{ duration: 0.5, delay: 0.9 }}
                >
                  <Button 
                    onClick={async () => {
                      try {
                        const { data, error } = await supabase.functions.invoke('test-auth');
                        if (data?.success) {
                          toast({
                            title: "‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ",
                            description: "–°–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ"
                          });
                        } else {
                          toast({
                            title: "‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è",
                            description: data?.error || error?.message,
                            variant: "destructive"
                          });
                        }
                      } catch (err) {
                        toast({
                          title: "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
                          description: `${err.message}`,
                          variant: "destructive"
                        });
                      }
                    }}
                    variant="ghost"
                    size="sm"
                    className="text-xs text-muted-foreground hover:text-foreground"
                  >
                    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                  </Button>
                  
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => setShowAdmin(!showAdmin)}
                    className="text-xs text-muted-foreground hover:text-foreground"
                  >
                    {showAdmin ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} –ª–æ–≥–∏
                  </Button>
                </motion.div>
              </motion.div>
            ) : (
              <motion.div
                initial={{ opacity: 0, scale: 0.95 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.5 }}
              >
                <GenerationProgress 
                  job={currentJob}
                  onReset={resetGeneration}
                  onRetry={currentJob.status === 'failed' ? handleRetry : undefined}
                />
              </motion.div>
            )}
          </div>
        </AnimatedCard>
      </div>
    </motion.div>
  );
}