/**
 * Advanced Music Studio Component
 * 
 * –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º—É–∑—ã–∫–∏ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏:
 * - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
 * - –ü–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å AI –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏
 */

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Wand2, Sparkles, Music, Settings, Brain, Mic, Guitar, Piano, Drum, 
  Volume2, Layers, Clock, Zap, Heart, Target, FileMusic, Shuffle,
  ChevronRight, ChevronLeft, Save, Download, Play, Upload
} from 'lucide-react';
import { useAuth } from '@/components/auth/AuthProvider';
import { useMusicGeneration, GenerationRequest } from '@/hooks/useMusicGeneration';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import ModelSelector, { ModelType } from '@/components/ui/model-selector';
import GenerationProgress from '../GenerationProgress';

interface AdvancedSettings {
  creativity: number;
  coherence: number;
  variability: number;
  structure: 'verse-chorus' | 'instrumental' | 'experimental';
  arrangement: 'minimal' | 'rich' | 'orchestral';
  mixingStyle: 'modern' | 'vintage' | 'lo-fi' | 'studio';
}

const STEP_TITLES = [
  '–ö–æ–Ω—Ü–µ–ø—Ü–∏—è',
  '–°—Ç–∏–ª—å –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ', 
  '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
  '–°—Ç—Ä—É–∫—Ç—É—Ä–∞',
  '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è'
];

export default function MusicStudioAdvanced() {
  // Core generation state
  const [prompt, setPrompt] = useState('');
  const [provider, setProvider] = useState<'mureka' | 'suno' | 'test'>('suno');
  const [model, setModel] = useState<ModelType>('V4_5');
  const [instrumental, setInstrumental] = useState(false);
  const [lyrics, setLyrics] = useState('');
  
  // Advanced settings
  const [advancedSettings, setAdvancedSettings] = useState<AdvancedSettings>({
    creativity: 70,
    coherence: 80,
    variability: 50,
    structure: 'verse-chorus',
    arrangement: 'rich',
    mixingStyle: 'modern'
  });

  // Style and mood
  const [genre, setGenre] = useState('pop');
  const [subGenre, setSubGenre] = useState('');
  const [mood, setMood] = useState('neutral');
  const [energy, setEnergy] = useState([65]);
  const [tempo, setTempo] = useState([120]);
  const [key, setKey] = useState('C');
  
  // Instruments and arrangement
  const [primaryInstruments, setPrimaryInstruments] = useState<string[]>([]);
  const [secondaryInstruments, setSecondaryInstruments] = useState<string[]>([]);
  const [vocalStyle, setVocalStyle] = useState('mixed');
  
  // Track structure
  const [duration, setDuration] = useState([180]);
  const [trackStructure, setTrackStructure] = useState({
    intro: true,
    verse: true,
    chorus: true,
    bridge: false,
    outro: true
  });

  // UI state
  const [currentStep, setCurrentStep] = useState(0);
  const [isEnhancing, setIsEnhancing] = useState(false);
  const [enhancedPrompt, setEnhancedPrompt] = useState('');
  const [previewMode, setPreviewMode] = useState(false);
  
  const { user } = useAuth();
  const { generateMusic, resetGeneration, isGenerating, currentJob } = useMusicGeneration();
  const { toast } = useToast();

  // Style options
  const genreOptions = [
    { value: 'pop', label: '–ü–æ–ø', subGenres: ['synth-pop', 'indie-pop', 'electro-pop'] },
    { value: 'rock', label: '–†–æ–∫', subGenres: ['indie-rock', 'alt-rock', 'prog-rock'] },
    { value: 'electronic', label: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è', subGenres: ['house', 'techno', 'ambient', 'synthwave'] },
    { value: 'jazz', label: '–î–∂–∞–∑', subGenres: ['smooth-jazz', 'fusion', 'bebop'] },
    { value: 'classical', label: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è', subGenres: ['romantic', 'baroque', 'contemporary'] },
    { value: 'hip-hop', label: '–•–∏–ø-—Ö–æ–ø', subGenres: ['trap', 'lo-fi-hip-hop', 'boom-bap'] },
    { value: 'r&b', label: 'R&B', subGenres: ['neo-soul', 'contemporary-r&b'] },
    { value: 'folk', label: '–§–æ–ª–∫', subGenres: ['indie-folk', 'acoustic'] }
  ];

  const moodOptions = [
    { value: 'energetic', label: '–≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ', icon: '‚ö°', color: 'text-yellow-600' },
    { value: 'calm', label: '–°–ø–æ–∫–æ–π–Ω–æ–µ', icon: 'üßò', color: 'text-blue-600' },
    { value: 'melancholic', label: '–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ–µ', icon: 'üòî', color: 'text-gray-600' },
    { value: 'happy', label: '–†–∞–¥–æ—Å—Ç–Ω–æ–µ', icon: 'üòä', color: 'text-green-600' },
    { value: 'mysterious', label: '–ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ', icon: 'üîÆ', color: 'text-purple-600' },
    { value: 'romantic', label: '–†–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ', icon: 'üíï', color: 'text-pink-600' },
    { value: 'epic', label: '–≠–ø–∏—á–Ω–æ–µ', icon: 'üè∞', color: 'text-orange-600' },
    { value: 'dreamy', label: '–ú–µ—á—Ç–∞—Ç–µ–ª—å–Ω–æ–µ', icon: '‚òÅÔ∏è', color: 'text-indigo-600' }
  ];

  const instrumentOptions = [
    { value: 'piano', label: '–§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ', icon: Piano, category: 'keyboard' },
    { value: 'guitar', label: '–ì–∏—Ç–∞—Ä–∞', icon: Guitar, category: 'strings' },
    { value: 'bass', label: '–ë–∞—Å-–≥–∏—Ç–∞—Ä–∞', icon: Music, category: 'strings' },
    { value: 'drums', label: '–ë–∞—Ä–∞–±–∞–Ω—ã', icon: Drum, category: 'percussion' },
    { value: 'vocals', label: '–í–æ–∫–∞–ª', icon: Mic, category: 'vocals' },
    { value: 'synth', label: '–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä', icon: Volume2, category: 'electronic' },
    { value: 'strings', label: '–°—Ç—Ä—É–Ω–Ω—ã–µ', icon: Music, category: 'orchestral' },
    { value: 'brass', label: '–î—É—Ö–æ–≤—ã–µ', icon: Music, category: 'orchestral' },
    { value: 'organ', label: '–û—Ä–≥–∞–Ω', icon: Piano, category: 'keyboard' },
    { value: 'saxophone', label: '–°–∞–∫—Å–æ—Ñ–æ–Ω', icon: Music, category: 'wind' }
  ];

  // AI prompt enhancement
  const enhancePrompt = async () => {
    if (!prompt.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è",
        variant: "destructive"
      });
      return;
    }

    setIsEnhancing(true);
    try {
      const { data, error } = await supabase.functions.invoke('prompt-enhancer', {
        body: {
          prompt: prompt.trim(),
          style: genre,
          mood,
          instruments: primaryInstruments.concat(secondaryInstruments),
          structure: advancedSettings.structure,
          language: 'russian'
        }
      });

      if (error) throw error;
      
      setEnhancedPrompt(data.enhancedPrompt);
      toast({
        title: "–ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω!",
        description: "–ò–ò —Å–æ–∑–¥–∞–ª –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ"
      });
    } catch (error) {
      console.error('Error enhancing prompt:', error);
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç",
        variant: "destructive"
      });
    } finally {
      setIsEnhancing(false);
    }
  };

  // Build detailed generation request
  const buildGenerationRequest = (): GenerationRequest => {
    const finalPrompt = enhancedPrompt || prompt;
    const styleDetails = [
      genre,
      subGenre && `${subGenre}`,
      `${mood} mood`,
      `${energy[0]}% energy`,
      `${tempo[0]} BPM`,
      advancedSettings.arrangement !== 'minimal' && `${advancedSettings.arrangement} arrangement`,
      advancedSettings.mixingStyle !== 'modern' && `${advancedSettings.mixingStyle} mixing`
    ].filter(Boolean).join(', ');

    const instrumentDescription = [
      primaryInstruments.length > 0 && `primary: ${primaryInstruments.join(', ')}`,
      secondaryInstruments.length > 0 && `secondary: ${secondaryInstruments.join(', ')}`
    ].filter(Boolean).join('; ');

    const enhancedDescription = [
      finalPrompt,
      `Style: ${styleDetails}`,
      instrumentDescription && `Instruments: ${instrumentDescription}`,
      !instrumental && lyrics && `Custom lyrics provided`,
      `Duration: ${Math.floor(duration[0] / 60)}:${(duration[0] % 60).toString().padStart(2, '0')}`
    ].filter(Boolean).join('. ');

    return {
      prompt: enhancedDescription,
      provider,
      model,
      style: genre,
      instrumental,
      lyrics: instrumental ? undefined : lyrics,
      duration: duration[0]
    };
  };

  // Handle generation
  const handleGenerate = async () => {
    if (!user) {
      toast({
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        description: "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—É–∑—ã–∫–∏",
        variant: "destructive"
      });
      return;
    }

    if (!prompt.trim()) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏",
        variant: "destructive"
      });
      return;
    }

    try {
      const request = buildGenerationRequest();
      await generateMusic(request);
      
      toast({
        title: "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞!",
        description: "–°–æ–∑–¥–∞–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏..."
      });
    } catch (error) {
      console.error('Generation error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã",
        variant: "destructive"
      });
    }
  };

  // Step navigation
  const nextStep = () => {
    if (currentStep < STEP_TITLES.length - 1) {
      setCurrentStep(currentStep + 1);
    }
  };

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1);
    }
  };

  const goToStep = (step: number) => {
    setCurrentStep(step);
  };

  // Toggle instrument selection
  const toggleInstrument = (instrument: string, isPrimary: boolean) => {
    if (isPrimary) {
      setPrimaryInstruments(prev => 
        prev.includes(instrument) 
          ? prev.filter(i => i !== instrument)
          : [...prev, instrument]
      );
    } else {
      setSecondaryInstruments(prev => 
        prev.includes(instrument) 
          ? prev.filter(i => i !== instrument)
          : [...prev, instrument]
      );
    }
  };

  // Show generation progress if active
  if (currentJob && isGenerating) {
    return (
      <div className="space-y-6">
        <GenerationProgress 
          job={currentJob} 
          onReset={resetGeneration}
        />
      </div>
    );
  }

  return (
    <div className="max-w-6xl mx-auto space-y-6">
      {/* Header */}
      <div className="text-center space-y-2">
        <div className="flex items-center justify-center gap-2">
          <Brain className="h-6 w-6 text-primary" />
          <h2 className="text-2xl font-bold">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å—Ç—É–¥–∏—è</h2>
        </div>
        <p className="text-muted-foreground">
          –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é —Å –ø–æ–ª–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –Ω–∞–¥ –ø—Ä–æ—Ü–µ—Å—Å–æ–º
        </p>
      </div>

      {/* Progress indicator */}
      <Card>
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium">
              –®–∞–≥ {currentStep + 1} –∏–∑ {STEP_TITLES.length}
            </span>
            <span className="text-sm text-muted-foreground">
              {Math.round(((currentStep + 1) / STEP_TITLES.length) * 100)}%
            </span>
          </div>
          <Progress value={((currentStep + 1) / STEP_TITLES.length) * 100} className="h-2" />
          
          {/* Step indicators */}
          <div className="flex justify-between mt-4">
            {STEP_TITLES.map((title, index) => (
              <button
                key={index}
                onClick={() => goToStep(index)}
                className={`text-xs text-center max-w-[80px] ${
                  index <= currentStep 
                    ? 'text-primary font-medium' 
                    : 'text-muted-foreground'
                }`}
              >
                <div className={`w-6 h-6 rounded-full mx-auto mb-1 flex items-center justify-center text-xs ${
                  index <= currentStep 
                    ? 'bg-primary text-primary-foreground' 
                    : 'bg-muted text-muted-foreground'
                }`}>
                  {index + 1}
                </div>
                {title}
              </button>
            ))}
          </div>
        </CardHeader>
      </Card>

      {/* Step Content */}
      <AnimatePresence mode="wait">
        <motion.div
          key={currentStep}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -20 }}
          transition={{ duration: 0.3 }}
        >
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                {currentStep === 0 && <FileMusic className="h-5 w-5" />}
                {currentStep === 1 && <Heart className="h-5 w-5" />}
                {currentStep === 2 && <Music className="h-5 w-5" />}
                {currentStep === 3 && <Layers className="h-5 w-5" />}
                {currentStep === 4 && <Sparkles className="h-5 w-5" />}
                {STEP_TITLES[currentStep]}
              </CardTitle>
            </CardHeader>
            
            <CardContent className="space-y-6">
              {/* Step 0: Concept */}
              {currentStep === 0 && (
                <div className="space-y-4">
                  <div>
                    <Label htmlFor="prompt">–û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏</Label>
                    <Textarea
                      id="prompt"
                      placeholder="–û–ø–∏—à–∏—Ç–µ –∫–∞–∫—É—é –º—É–∑—ã–∫—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å. –ë—É–¥—å—Ç–µ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã –∏ –¥–µ—Ç–∞–ª—å–Ω—ã..."
                      value={prompt}
                      onChange={(e) => setPrompt(e.target.value)}
                      className="min-h-[120px] mt-2"
                    />
                  </div>
                  
                  <div className="flex gap-2">
                    <Button 
                      onClick={enhancePrompt}
                      disabled={isEnhancing || !prompt.trim()}
                      variant="outline"
                      className="flex-1"
                    >
                      <Brain className={`h-4 w-4 mr-2 ${isEnhancing ? 'animate-pulse' : ''}`} />
                      {isEnhancing ? '–£–ª—É—á—à–∞—é...' : '–£–ª—É—á—à–∏—Ç—å —Å –ò–ò'}
                    </Button>
                  </div>

                  {enhancedPrompt && (
                    <div className="p-4 bg-muted/50 rounded-lg border">
                      <Label className="text-sm font-medium">–£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:</Label>
                      <p className="text-sm mt-2">{enhancedPrompt}</p>
                    </div>
                  )}

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label>–ü—Ä–æ–≤–∞–π–¥–µ—Ä</Label>
                      <Select value={provider} onValueChange={(value: any) => setProvider(value)}>
                        <SelectTrigger className="mt-2">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="suno">Suno AI</SelectItem>
                          <SelectItem value="mureka">Mureka</SelectItem>
                          <SelectItem value="test">–¢–µ—Å—Ç–æ–≤—ã–π</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label>–ú–æ–¥–µ–ª—å</Label>
                      <div className="mt-2">
                        <ModelSelector
                          provider={provider}
                          value={model}
                          onChange={setModel}
                        />
                      </div>
                    </div>
                  </div>
                </div>
              )}

              {/* Step 1: Style & Mood */}
              {currentStep === 1 && (
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <Label>–ñ–∞–Ω—Ä</Label>
                      <Select value={genre} onValueChange={setGenre}>
                        <SelectTrigger className="mt-2">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          {genreOptions.map(g => (
                            <SelectItem key={g.value} value={g.value}>{g.label}</SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                    
                    <div>
                      <Label>–ü–æ–¥–∂–∞–Ω—Ä</Label>
                      <Select value={subGenre} onValueChange={setSubGenre}>
                        <SelectTrigger className="mt-2">
                          <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∂–∞–Ω—Ä" />
                        </SelectTrigger>
                        <SelectContent>
                          {genreOptions
                            .find(g => g.value === genre)?.subGenres
                            .map(sg => (
                              <SelectItem key={sg} value={sg}>{sg}</SelectItem>
                            ))
                          }
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div>
                    <Label className="mb-3 block">–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</Label>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
                      {moodOptions.map(m => (
                        <button
                          key={m.value}
                          onClick={() => setMood(m.value)}
                          className={`p-3 rounded-lg border-2 transition-all ${
                            mood === m.value 
                              ? 'border-primary bg-primary/10' 
                              : 'border-border hover:border-primary/50'
                          }`}
                        >
                          <div className="text-2xl mb-1">{m.icon}</div>
                          <div className={`text-xs font-medium ${m.color}`}>{m.label}</div>
                        </button>
                      ))}
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                      <Label>–≠–Ω–µ—Ä–≥–∏—á–Ω–æ—Å—Ç—å: {energy[0]}%</Label>
                      <Slider
                        value={energy}
                        onValueChange={setEnergy}
                        max={100}
                        step={5}
                        className="mt-2"
                      />
                    </div>
                    
                    <div>
                      <Label>–¢–µ–º–ø: {tempo[0]} BPM</Label>
                      <Slider
                        value={tempo}
                        onValueChange={setTempo}
                        min={60}
                        max={200}
                        step={5}
                        className="mt-2"
                      />
                    </div>
                  </div>
                </div>
              )}

              {/* Step 2: Instruments */}
              {currentStep === 2 && (
                <div className="space-y-6">
                  <div className="flex items-center gap-2 mb-4">
                    <Switch
                      checked={instrumental}
                      onCheckedChange={setInstrumental}
                    />
                    <Label>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è</Label>
                  </div>

                  {!instrumental && (
                    <div>
                      <Label>–°—Ç–∏–ª—å –≤–æ–∫–∞–ª–∞</Label>
                      <Select value={vocalStyle} onValueChange={setVocalStyle}>
                        <SelectTrigger className="mt-2">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="mixed">–°–º–µ—à–∞–Ω–Ω—ã–π</SelectItem>
                          <SelectItem value="male">–ú—É–∂—Å–∫–æ–π</SelectItem>
                          <SelectItem value="female">–ñ–µ–Ω—Å–∫–∏–π</SelectItem>
                          <SelectItem value="choir">–•–æ—Ä</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  )}

                  <div>
                    <Label className="mb-3 block">–û—Å–Ω–æ–≤–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</Label>
                    <div className="grid grid-cols-2 md:grid-cols-5 gap-2">
                      {instrumentOptions.map(inst => {
                        const Icon = inst.icon;
                        const isSelected = primaryInstruments.includes(inst.value);
                        return (
                          <button
                            key={inst.value}
                            onClick={() => toggleInstrument(inst.value, true)}
                            className={`p-3 rounded-lg border-2 transition-all ${
                              isSelected 
                                ? 'border-primary bg-primary/10' 
                                : 'border-border hover:border-primary/50'
                            }`}
                          >
                            <Icon className="h-6 w-6 mx-auto mb-2" />
                            <div className="text-xs font-medium">{inst.label}</div>
                          </button>
                        );
                      })}
                    </div>
                  </div>

                  <div>
                    <Label className="mb-3 block">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</Label>
                    <div className="grid grid-cols-2 md:grid-cols-5 gap-2">
                      {instrumentOptions.map(inst => {
                        const Icon = inst.icon;
                        const isSelected = secondaryInstruments.includes(inst.value);
                        const isPrimary = primaryInstruments.includes(inst.value);
                        return (
                          <button
                            key={inst.value}
                            onClick={() => toggleInstrument(inst.value, false)}
                            disabled={isPrimary}
                            className={`p-3 rounded-lg border-2 transition-all ${
                              isPrimary 
                                ? 'border-muted bg-muted/50 opacity-50 cursor-not-allowed'
                                : isSelected 
                                  ? 'border-secondary bg-secondary/10' 
                                  : 'border-border hover:border-secondary/50'
                            }`}
                          >
                            <Icon className="h-6 w-6 mx-auto mb-2" />
                            <div className="text-xs font-medium">{inst.label}</div>
                          </button>
                        );
                      })}
                    </div>
                  </div>
                </div>
              )}

              {/* Step 3: Structure */}
              {currentStep === 3 && (
                <div className="space-y-6">
                  <div>
                    <Label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {Math.floor(duration[0] / 60)}:{(duration[0] % 60).toString().padStart(2, '0')}</Label>
                    <Slider
                      value={duration}
                      onValueChange={setDuration}
                      min={30}
                      max={300}
                      step={15}
                      className="mt-2"
                    />
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                    <div>
                      <Label>–°—Ç—Ä—É–∫—Ç—É—Ä–∞</Label>
                      <Select 
                        value={advancedSettings.structure} 
                        onValueChange={(value: any) => 
                          setAdvancedSettings(prev => ({ ...prev, structure: value }))
                        }
                      >
                        <SelectTrigger className="mt-2">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="verse-chorus">–ö—É–ø–ª–µ—Ç-–ü—Ä–∏–ø–µ–≤</SelectItem>
                          <SelectItem value="instrumental">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è</SelectItem>
                          <SelectItem value="experimental">–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–∞—è</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label>–ê—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–∞</Label>
                      <Select 
                        value={advancedSettings.arrangement} 
                        onValueChange={(value: any) => 
                          setAdvancedSettings(prev => ({ ...prev, arrangement: value }))
                        }
                      >
                        <SelectTrigger className="mt-2">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="minimal">–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è</SelectItem>
                          <SelectItem value="rich">–ë–æ–≥–∞—Ç–∞—è</SelectItem>
                          <SelectItem value="orchestral">–û—Ä–∫–µ—Å—Ç—Ä–æ–≤–∞—è</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>

                    <div>
                      <Label>–°—Ç–∏–ª—å –º–∏–∫—Å–∞</Label>
                      <Select 
                        value={advancedSettings.mixingStyle} 
                        onValueChange={(value: any) => 
                          setAdvancedSettings(prev => ({ ...prev, mixingStyle: value }))
                        }
                      >
                        <SelectTrigger className="mt-2">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="modern">–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π</SelectItem>
                          <SelectItem value="vintage">–í–∏–Ω—Ç–∞–∂–Ω—ã–π</SelectItem>
                          <SelectItem value="lo-fi">Lo-Fi</SelectItem>
                          <SelectItem value="studio">–°—Ç—É–¥–∏–π–Ω—ã–π</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                    <div>
                      <Label>–ö—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {advancedSettings.creativity}%</Label>
                      <Slider
                        value={[advancedSettings.creativity]}
                        onValueChange={([value]) => 
                          setAdvancedSettings(prev => ({ ...prev, creativity: value }))
                        }
                        max={100}
                        step={5}
                        className="mt-2"
                      />
                    </div>
                    
                    <div>
                      <Label>–°–≤—è–∑–Ω–æ—Å—Ç—å: {advancedSettings.coherence}%</Label>
                      <Slider
                        value={[advancedSettings.coherence]}
                        onValueChange={([value]) => 
                          setAdvancedSettings(prev => ({ ...prev, coherence: value }))
                        }
                        max={100}
                        step={5}
                        className="mt-2"
                      />
                    </div>

                    <div>
                      <Label>–í–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å: {advancedSettings.variability}%</Label>
                      <Slider
                        value={[advancedSettings.variability]}
                        onValueChange={([value]) => 
                          setAdvancedSettings(prev => ({ ...prev, variability: value }))
                        }
                        max={100}
                        step={5}
                        className="mt-2"
                      />
                    </div>
                  </div>

                  {!instrumental && (
                    <div>
                      <Label htmlFor="lyrics">–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
                      <Textarea
                        id="lyrics"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏..."
                        value={lyrics}
                        onChange={(e) => setLyrics(e.target.value)}
                        className="min-h-[100px] mt-2"
                      />
                    </div>
                  )}
                </div>
              )}

              {/* Step 4: Generation */}
              {currentStep === 4 && (
                <div className="space-y-6">
                  <div className="text-center">
                    <h3 className="text-lg font-semibold mb-2">–ì–æ—Ç–æ–≤–æ –∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏!</h3>
                    <p className="text-muted-foreground">
                      –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
                    </p>
                  </div>

                  {/* Generation summary */}
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <Card>
                      <CardHeader className="pb-3">
                        <CardTitle className="text-sm">–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-2 text-sm">
                        <div className="flex justify-between">
                          <span>–ñ–∞–Ω—Ä:</span>
                          <span className="font-medium">{genreOptions.find(g => g.value === genre)?.label}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ:</span>
                          <span className="font-medium">{moodOptions.find(m => m.value === mood)?.label}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                          <span className="font-medium">{Math.floor(duration[0] / 60)}:{(duration[0] % 60).toString().padStart(2, '0')}</span>
                        </div>
                        <div className="flex justify-between">
                          <span>–¢–µ–º–ø:</span>
                          <span className="font-medium">{tempo[0]} BPM</span>
                        </div>
                      </CardContent>
                    </Card>

                    <Card>
                      <CardHeader className="pb-3">
                        <CardTitle className="text-sm">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-2 text-sm">
                        {primaryInstruments.length > 0 && (
                          <div>
                            <span className="text-muted-foreground">–û—Å–Ω–æ–≤–Ω—ã–µ:</span>
                            <div className="flex flex-wrap gap-1 mt-1">
                              {primaryInstruments.map(inst => (
                                <Badge key={inst} variant="default" className="text-xs">
                                  {instrumentOptions.find(i => i.value === inst)?.label}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                        {secondaryInstruments.length > 0 && (
                          <div>
                            <span className="text-muted-foreground">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ:</span>
                            <div className="flex flex-wrap gap-1 mt-1">
                              {secondaryInstruments.map(inst => (
                                <Badge key={inst} variant="secondary" className="text-xs">
                                  {instrumentOptions.find(i => i.value === inst)?.label}
                                </Badge>
                              ))}
                            </div>
                          </div>
                        )}
                        {!instrumental && (
                          <div className="flex justify-between">
                            <span>–í–æ–∫–∞–ª:</span>
                            <span className="font-medium">{vocalStyle}</span>
                          </div>
                        )}
                      </CardContent>
                    </Card>
                  </div>

                  <div className="text-center">
                    <Button 
                      onClick={handleGenerate}
                      disabled={isGenerating}
                      size="lg"
                      className="px-8"
                    >
                      <Sparkles className="h-5 w-5 mr-2" />
                      –°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–æ–∑–∏—Ü–∏—é
                    </Button>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>
        </motion.div>
      </AnimatePresence>

      {/* Navigation */}
      <div className="flex justify-between">
        <Button
          onClick={prevStep}
          disabled={currentStep === 0}
          variant="outline"
        >
          <ChevronLeft className="h-4 w-4 mr-2" />
          –ù–∞–∑–∞–¥
        </Button>

        <div className="flex gap-2">
          {currentStep < STEP_TITLES.length - 1 && (
            <Button onClick={nextStep}>
              –î–∞–ª–µ–µ
              <ChevronRight className="h-4 w-4 ml-2" />
            </Button>
          )}
        </div>
      </div>
    </div>
  );
}