/**
 * Unified Music Studio Component
 * 
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∏ –≤ –æ–¥–∏–Ω –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
 * —Å –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—ã–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 */

import { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { Switch } from '@/components/ui/switch';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { AudioVisualizer } from '@/components/ui/audio-visualizer';
import { useAuth } from '@/components/auth/AuthProvider';
import { useMusicGeneration, GenerationRequest } from '@/hooks/useMusicGeneration';
import ModelSelector, { ModelType } from '@/components/ui/model-selector';
import { useRealtimeUpdates } from '@/hooks/useRealtimeUpdates';
import GenerationProgress from './GenerationProgress';
import { useToast } from '@/hooks/use-toast';
import { supabase } from '@/integrations/supabase/client';
import { getGenerationStatusText } from '@/hooks/useGenerationStatusText';
import { 
  Wand2, Sparkles, Music, Shuffle, Zap, Volume2, Brain, 
  Mic, Guitar, Piano, Drum, Waves, Settings, 
  ChevronDown, ChevronUp, Lightbulb, FileText, RefreshCw
} from 'lucide-react';

type StudioMode = 'simple' | 'advanced';

export default function UnifiedMusicStudio() {
  // Core state
  const [mode, setMode] = useState<StudioMode>('simple');
  const [prompt, setPrompt] = useState('');
  const [provider, setProvider] = useState<'mureka' | 'suno' | 'test'>('suno');
  const [model, setModel] = useState<ModelType>('V4_5');
  const [style, setStyle] = useState('pop');
  const [duration, setDuration] = useState([120]);
  const [instrumental, setInstrumental] = useState(false);
  const [lyrics, setLyrics] = useState('');

  // Advanced options (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ —Ä–µ–∂–∏–º–∞)
  const [energy, setEnergy] = useState([50]);
  const [mood, setMood] = useState('neutral');
  const [tempo, setTempo] = useState([120]);
  const [complexity, setComplexity] = useState([50]);
  const [instruments, setInstruments] = useState<string[]>([]);

  // UI state
  const [isEnhancing, setIsEnhancing] = useState(false);
  const [isGeneratingLyrics, setIsGeneratingLyrics] = useState(false);
  const [isGeneratingPrompt, setIsGeneratingPrompt] = useState(false);
  const [isGeneratingAILyrics, setIsGeneratingAILyrics] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);

  const { user } = useAuth();
  const { generateMusic, resetGeneration, isGenerating, currentJob } = useMusicGeneration();
  const { toast } = useToast();

  // Real-time updates
  useRealtimeUpdates({
    onJobUpdate: () => {
      console.log('Generation job update detected');
    }
  });

  // Simple mode suggestions
  const simpleSuggestions = [
    '–≠–Ω–µ—Ä–≥–∏—á–Ω–∞—è –ø–æ–ø-–ø–µ—Å–Ω—è –æ –ª–µ—Ç–µ —Å —è—Ä–∫–∏–º–∏ —Å–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä–∞–º–∏',
    '–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –±–∞–ª–ª–∞–¥–∞ —Å –Ω–µ–∂–Ω—ã–º –∂–µ–Ω—Å–∫–∏–º –≤–æ–∫–∞–ª–æ–º',
    '–¢–∞–Ω—Ü–µ–≤–∞–ª—å–Ω—ã–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Ç—Ä–µ–∫ —Å –ø—É–ª—å—Å–∏—Ä—É—é—â–∏–º –±–∞—Å–æ–º',
    '–°–ø–æ–∫–æ–π–Ω–∞—è –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è —Å –≥–∏—Ç–∞—Ä–æ–π',
    '–î–∏–Ω–∞–º–∏—á–Ω—ã–π —Ä–æ–∫-—Ç—Ä–µ–∫ —Å –º–æ—â–Ω—ã–º–∏ –±–∞—Ä–∞–±–∞–Ω–∞–º–∏'
  ];

  // Advanced mode options
  const moodOptions = [
    { value: 'neutral', label: '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ', icon: 'üòê' },
    { value: 'happy', label: '–†–∞–¥–æ—Å—Ç–Ω–æ–µ', icon: 'üòä' },
    { value: 'melancholic', label: '–ú–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–æ–µ', icon: 'üò¢' },
    { value: 'energetic', label: '–≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ', icon: '‚ö°' },
    { value: 'calm', label: '–°–ø–æ–∫–æ–π–Ω–æ–µ', icon: 'üòå' },
    { value: 'mysterious', label: '–ú–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ', icon: 'üîÆ' },
    { value: 'romantic', label: '–†–æ–º–∞–Ω—Ç–∏—á–Ω–æ–µ', icon: 'üíï' },
    { value: 'epic', label: '–≠–ø–∏—á–Ω–æ–µ', icon: 'üè∞' }
  ];

  const instrumentOptions = [
    { value: 'piano', label: '–§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ', icon: Piano },
    { value: 'guitar', label: '–ì–∏—Ç–∞—Ä–∞', icon: Guitar },
    { value: 'drums', label: '–ë–∞—Ä–∞–±–∞–Ω—ã', icon: Drum },
    { value: 'synthesizer', label: '–°–∏–Ω—Ç–µ–∑–∞—Ç–æ—Ä', icon: Waves },
    { value: 'vocals', label: '–í–æ–∫–∞–ª', icon: Mic },
    { value: 'strings', label: '–°—Ç—Ä—É–Ω–Ω—ã–µ', icon: Music }
  ];

  // Generate AI prompt
  const generateAIPrompt = async () => {
    setIsGeneratingPrompt(true);
    
    try {
      const { data, error } = await supabase.functions.invoke('ai-prompt-generator', {
        body: { 
          type: 'music', 
          style: style,
          context: prompt || `${style} –º—É–∑—ã–∫–∞`
        }
      });

      if (data?.success && data.prompt) {
        setPrompt(data.prompt);
        toast({
          title: "–ü—Ä–æ–º–ø—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!",
          description: "–ò–ò —Å–æ–∑–¥–∞–ª –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ —Ç—Ä–µ–∫–∞"
        });
      } else {
        throw new Error(data?.error || 'Prompt generation failed');
      }
    } catch (error) {
      console.error('AI prompt generation error:', error);
      
      // Fallback to random suggestion
      generateRandomPrompt();
      
      toast({
        title: "–ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω –ª–æ–∫–∞–ª—å–Ω–æ",
        description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç"
      });
    }
    
    setIsGeneratingPrompt(false);
  };

  // Generate random prompt for simple mode
  const generateRandomPrompt = () => {
    const suggestion = simpleSuggestions[Math.floor(Math.random() * simpleSuggestions.length)];
    setPrompt(suggestion);
  };

  // Enhance prompt with AI
  const enhancePrompt = async () => {
    if (!prompt.trim()) {
      generateRandomPrompt();
      return;
    }
    
    setIsEnhancing(true);
    
    try {
      const { data, error } = await supabase.functions.invoke('style-enhance', {
        body: { content: prompt }
      });

      if (data?.success && data.enhancedStyle) {
        setPrompt(data.enhancedStyle);
        toast({
          title: "–ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò!",
          description: `–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –º–µ—Ç–æ–¥: ${data.method || 'suno_api'}`
        });
      } else {
        throw new Error(data?.error || 'Enhancement failed');
      }
    } catch (error) {
      console.error('Enhancement error:', error);
      
      // Fallback to local enhancement
      const enhancements = [
        '—Å –±–æ–≥–∞—Ç–æ–π –∞—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–æ–π –∏ –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã–º –∑–≤—É—á–∞–Ω–∏–µ–º',
        '—Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å—Ç—É–¥–∏–π–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º',
        '—Å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–∞—á–µ–π –∏ –¥–∏–Ω–∞–º–∏—á–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏',
        '—Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω–æ–º –∏ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏'
      ];
      
      const enhancement = enhancements[Math.floor(Math.random() * enhancements.length)];
      setPrompt(prev => `${prev}, ${enhancement}`);
      
      toast({
        title: "–ü—Ä–æ–º–ø—Ç —É–ª—É—á—à–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ",
        description: "–î–æ–±–∞–≤–ª–µ–Ω—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏"
      });
    }
    
    setIsEnhancing(false);
  };

  // Generate lyrics
  const generateLyrics = async () => {
    if (!prompt.trim()) {
      toast({
        title: "–£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
        description: "–û–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Ä–∏–∫–∏",
        variant: "destructive"
      });
      return;
    }

    setIsGeneratingLyrics(true);

    try {
      const lyricsPrompt = `${style} –ø–µ—Å–Ω—è –æ ${prompt.substring(0, 100)}...`.substring(0, 200);
      
      const { data, error } = await supabase.functions.invoke('generate-lyrics', {
        body: { 
          prompt: lyricsPrompt,
          style: style,
          language: 'russian',
          structure: 'verse-chorus'
        }
      });

      if (data?.success && data.lyrics) {
        const lyricsId = data.lyrics.id;
        
        const checkExistingLyrics = async () => {
          const { data: existingLyrics } = await supabase
            .from('lyrics')
            .select('content')
            .eq('id', lyricsId)
            .single();
            
          if (existingLyrics?.content && existingLyrics.content !== "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—Ä–∏–∫–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ... –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.") {
            setLyrics(existingLyrics.content);
            setIsGeneratingLyrics(false);
            toast({
              title: "üé§ –õ–∏—Ä–∏–∫–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!",
              description: "–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò"
            });
            return true;
          }
          return false;
        };

        const isReady = await checkExistingLyrics();
        
        if (!isReady) {
          const pollInterval = setInterval(async () => {
            const isNowReady = await checkExistingLyrics();
            if (isNowReady) {
              clearInterval(pollInterval);
            }
          }, 3000);

          setTimeout(() => {
            clearInterval(pollInterval);
            if (isGeneratingLyrics) {
              setIsGeneratingLyrics(false);
              toast({
                title: "‚è∞ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω–∏–º–∞–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏",
                description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É",
                variant: "destructive"
              });
            }
          }, 120000);

          toast({
            title: "üéµ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–∏—Ä–∏–∫–∏ –Ω–∞—á–∞—Ç–∞",
            description: "–û–∂–∏–¥–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
          });
        }
      } else {
        throw new Error(data?.error || error?.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ª–∏—Ä–∏–∫—É');
      }
    } catch (error) {
      console.error('Lyrics generation error:', error);
      setIsGeneratingLyrics(false);
      toast({
        title: "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Ä–∏–∫–∏",
        description: error.message || "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
        variant: "destructive"
      });
    }
  };

  // Generate AI lyrics prompt
  const generateAILyrics = async () => {
    setIsGeneratingAILyrics(true);
    
    try {
      const { data, error } = await supabase.functions.invoke('ai-prompt-generator', {
        body: { 
          type: 'lyrics', 
          style: style,
          context: prompt,
          language: 'russian'
        }
      });

      if (data?.success && data.prompt) {
        setLyrics(data.prompt);
        toast({
          title: "–¢–µ–∫—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!",
          description: "–ò–ò —Å–æ–∑–¥–∞–ª –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Ä–∏–∫–∏"
        });
      } else {
        throw new Error(data?.error || 'Lyrics prompt generation failed');
      }
    } catch (error) {
      console.error('AI lyrics generation error:', error);
      toast({
        title: "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏",
        description: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
        variant: "destructive"
      });
    }
    
    setIsGeneratingAILyrics(false);
  };

  // Handle generation
  const handleGenerate = async () => {
    if (!prompt.trim() || !user) return;

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –ª–∏—Ä–∏–∫–∏
    const finalLyrics = instrumental ? undefined : (lyrics.trim() || undefined);

    const request: GenerationRequest = {
      prompt: mode === 'advanced' ? buildEnhancedPrompt() : prompt,
      provider,
      model,
      style,
      duration: duration[0],
      instrumental,
      lyrics: finalLyrics
    };

    try {
      await generateMusic(request);
    } catch (error) {
      console.error('Generation error:', error);
    }
  };

  // Build enhanced prompt for advanced mode
  const buildEnhancedPrompt = () => {
    let enhancedPrompt = prompt;
    
    const selectedMood = moodOptions.find(m => m.value === mood);
    if (selectedMood && mood !== 'neutral') {
      enhancedPrompt += `, ${selectedMood.label.toLowerCase()} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ`;
    }
    
    if (tempo[0] < 80) {
      enhancedPrompt += ', –º–µ–¥–ª–µ–Ω–Ω—ã–π —Ç–µ–º–ø';
    } else if (tempo[0] > 140) {
      enhancedPrompt += ', –±—ã—Å—Ç—Ä—ã–π —Ç–µ–º–ø';
    }
    
    if (energy[0] > 70) {
      enhancedPrompt += ', –≤—ã—Å–æ–∫–∞—è —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞';
    } else if (energy[0] < 30) {
      enhancedPrompt += ', —Å–ø–æ–∫–æ–π–Ω–æ–µ –∑–≤—É—á–∞–Ω–∏–µ';
    }
    
    if (instruments.length > 0) {
      enhancedPrompt += `, –∞–∫—Ü–µ–Ω—Ç –Ω–∞ ${instruments.join(', ')}`;
    }
    
    return enhancedPrompt;
  };

  const toggleInstrument = (instrument: string) => {
    setInstruments(prev => 
      prev.includes(instrument) 
        ? prev.filter(i => i !== instrument)
        : [...prev, instrument]
    );
  };

  const handleProviderChange = (newProvider: 'mureka' | 'suno' | 'test') => {
    setProvider(newProvider);
    if (newProvider === 'suno') {
      setModel('V4_5');
    } else if (newProvider === 'mureka') {
      setModel('mureka-v6');
    } else {
      setModel('test');
    }
  };

  if (currentJob) {
    return (
      <GenerationProgress 
        job={currentJob}
        onReset={resetGeneration}
        onRetry={currentJob.status === 'failed' ? handleGenerate : undefined}
        statusText={getGenerationStatusText(currentJob)}
      />
    );
  }

  return (
    <div className="max-w-5xl mx-auto space-y-6 px-4 sm:px-6">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        className="text-center space-y-4"
      >
        <div className="flex items-center justify-center gap-3">
          <div className="p-3 rounded-full bg-gradient-to-r from-primary to-purple-600">
            <Brain className="h-6 w-6 text-white" />
          </div>
          <h1 className="text-3xl font-bold gradient-text">AI Music Studio</h1>
          <AudioVisualizer isPlaying={isGenerating} barCount={5} className="h-6" />
        </div>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –º—É–∑—ã–∫—É —Å –ø–æ–º–æ—â—å—é –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞
        </p>
      </motion.div>

      {/* Mode Toggle */}
      <Card>
        <CardContent className="pt-6">
          <div className="flex items-center justify-center gap-2 sm:gap-4 flex-wrap">
            <Button
              variant={mode === 'simple' ? 'default' : 'outline'}
              onClick={() => setMode('simple')}
              className="flex items-center gap-2 text-sm sm:text-base"
              size="sm"
            >
              <Music className="h-4 w-4" />
              <span className="hidden sm:inline">–ü—Ä–æ—Å—Ç–æ–π —Ä–µ–∂–∏–º</span>
              <span className="sm:hidden">–ü—Ä–æ—Å—Ç–æ–π</span>
            </Button>
            <Button
              variant={mode === 'advanced' ? 'default' : 'outline'}
              onClick={() => setMode('advanced')}
              className="flex items-center gap-2 text-sm sm:text-base"
              size="sm"
            >
              <Settings className="h-4 w-4" />
              <span className="hidden sm:inline">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ä–µ–∂–∏–º</span>
              <span className="sm:hidden">–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π</span>
            </Button>
          </div>
        </CardContent>
      </Card>

      {/* Main Studio Interface */}
      <Card className="overflow-hidden">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Wand2 className="h-5 w-5" />
            –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
            <Badge variant="secondary">{mode === 'simple' ? '–ü—Ä–æ—Å—Ç–æ–π' : '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'}</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-6">
          {/* Prompt Section */}
          <div className="space-y-3">
            <div className="flex items-center justify-between flex-wrap gap-2">
              <Label className="text-base font-medium">–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞</Label>
              <div className="flex gap-1 sm:gap-2 flex-wrap">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={generateAIPrompt}
                  disabled={isGeneratingPrompt}
                  className="text-xs sm:text-sm"
                >
                  <Brain className={`h-3 w-3 sm:h-4 sm:w-4 mr-1 ${isGeneratingPrompt ? 'animate-pulse' : ''}`} />
                  <span className="hidden sm:inline">{isGeneratingPrompt ? '–ì–µ–Ω–µ—Ä–∏—Ä—É—é...' : '–ò–ò –ü—Ä–æ–º–ø—Ç'}</span>
                  <span className="sm:hidden">–ò–ò</span>
                </Button>
                {mode === 'simple' && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={generateRandomPrompt}
                    className="text-xs sm:text-sm"
                  >
                    <Shuffle className="h-3 w-3 sm:h-4 sm:w-4 mr-1" />
                    <span className="hidden sm:inline">–°–ª—É—á–∞–π–Ω—ã–π</span>
                    <span className="sm:hidden">–°–ª—É—á</span>
                  </Button>
                )}
                {mode === 'advanced' && (
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => setShowSuggestions(!showSuggestions)}
                    className="text-xs sm:text-sm"
                  >
                    <Lightbulb className="h-3 w-3 sm:h-4 sm:w-4 mr-1" />
                    <span className="hidden sm:inline">–ò–¥–µ–∏</span>
                    <span className="sm:hidden">üí°</span>
                  </Button>
                )}
                <Button
                  variant="outline"
                  size="sm"
                  onClick={enhancePrompt}
                  disabled={isEnhancing}
                  className="text-xs sm:text-sm"
                >
                  <Zap className={`h-3 w-3 sm:h-4 sm:w-4 mr-1 ${isEnhancing ? 'animate-pulse' : ''}`} />
                  {isEnhancing ? '–£–ª—É—á—à–∞—é...' : '–£–ª—É—á—à–∏—Ç—å –ò–ò'}
                </Button>
              </div>
            </div>
            
            <Textarea
              placeholder="–û–ø–∏—à–∏—Ç–µ –º—É–∑—ã–∫—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å..."
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              rows={mode === 'simple' ? 2 : 3}
              className="resize-none text-sm sm:text-base"
            />

            {/* Simple mode suggestions */}
            {mode === 'simple' && showSuggestions && (
              <div className="grid gap-2 mt-2">
                {simpleSuggestions.map((suggestion, index) => (
                  <button
                    key={index}
                    onClick={() => setPrompt(suggestion)}
                    className="text-left p-2 rounded border hover:border-primary/50 transition-colors text-sm"
                  >
                    {suggestion}
                  </button>
                ))}
              </div>
            )}
          </div>

          {/* Basic Settings */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Provider */}
            <div className="space-y-2">
              <Label>–ò–ò –ü—Ä–æ–≤–∞–π–¥–µ—Ä</Label>
              <Select value={provider} onValueChange={handleProviderChange}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="suno">
                    <div className="flex items-center gap-2">
                      <Sparkles className="h-4 w-4" />
                      Suno AI
                    </div>
                  </SelectItem>
                  <SelectItem value="mureka">
                    <div className="flex items-center gap-2">
                      <Music className="h-4 w-4" />
                      Mureka AI
                    </div>
                  </SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Style */}
            <div className="space-y-2">
              <Label>–°—Ç–∏–ª—å</Label>
              <Select value={style} onValueChange={setStyle}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="pop">–ü–æ–ø</SelectItem>
                  <SelectItem value="rock">–†–æ–∫</SelectItem>
                  <SelectItem value="electronic">–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è</SelectItem>
                  <SelectItem value="hip-hop">–•–∏–ø-—Ö–æ–ø</SelectItem>
                  <SelectItem value="classical">–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è</SelectItem>
                  <SelectItem value="jazz">–î–∂–∞–∑</SelectItem>
                  <SelectItem value="ambient">–≠–º–±–∏–µ–Ω—Ç</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Duration */}
            <div className="space-y-2">
              <Label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration[0]} —Å–µ–∫</Label>
              <Slider
                value={duration}
                onValueChange={setDuration}
                max={mode === 'simple' ? 180 : 300}
                min={30}
                step={15}
                className="w-full"
              />
            </div>
          </div>

          {/* Advanced Settings */}
          {mode === 'advanced' && (
            <div className="space-y-6 pt-4 border-t">
              {/* Mood */}
              <div className="space-y-2">
                <Label>–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ</Label>
                <Select value={mood} onValueChange={setMood}>
                  <SelectTrigger>
                    <SelectValue />
                  </SelectTrigger>
                  <SelectContent>
                    {moodOptions.map(option => (
                      <SelectItem key={option.value} value={option.value}>
                        <div className="flex items-center gap-2">
                          <span>{option.icon}</span>
                          {option.label}
                        </div>
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              {/* Advanced Sliders */}
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div className="space-y-3">
                  <Label>–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞: {energy[0]}%</Label>
                  <Slider
                    value={energy}
                    onValueChange={setEnergy}
                    max={100}
                    min={0}
                    step={10}
                  />
                </div>

                <div className="space-y-3">
                  <Label>–¢–µ–º–ø: {tempo[0]} BPM</Label>
                  <Slider
                    value={tempo}
                    onValueChange={setTempo}
                    max={200}
                    min={60}
                    step={5}
                  />
                </div>
              </div>

              {/* Instruments */}
              <div className="space-y-3">
                <Label>–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã</Label>
                <div className="flex flex-wrap gap-2">
                  {instrumentOptions.map(instrument => {
                    const Icon = instrument.icon;
                    const isSelected = instruments.includes(instrument.value);
                    
                    return (
                      <Button
                        key={instrument.value}
                        variant={isSelected ? "default" : "outline"}
                        size="sm"
                        onClick={() => toggleInstrument(instrument.value)}
                        className="flex items-center gap-1"
                      >
                        <Icon className="h-3 w-3" />
                        {instrument.label}
                      </Button>
                    );
                  })}
                </div>
              </div>
            </div>
          )}

          {/* Controls */}
          <div className="flex items-center justify-between pt-4">
            <div className="flex items-center gap-4">
              <div className="flex items-center space-x-2">
                <Switch
                  id="instrumental"
                  checked={instrumental}
                  onCheckedChange={setInstrumental}
                />
                <Label htmlFor="instrumental">–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª</Label>
              </div>
              
              {!instrumental && (
                <Button
                  variant="outline"
                  size="sm"
                  onClick={generateLyrics}
                  disabled={isGeneratingLyrics}
                >
                  <FileText className={`h-4 w-4 mr-1 ${isGeneratingLyrics ? 'animate-pulse' : ''}`} />
                  {isGeneratingLyrics ? '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '–°–æ–∑–¥–∞—Ç—å –ª–∏—Ä–∏–∫—É'}
                </Button>
              )}
            </div>

            <div className="flex gap-2">
              <Button
                onClick={handleGenerate}
                disabled={!prompt.trim() || isGenerating}
                size="lg"
                className="min-w-32"
              >
                {isGenerating ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                    –°–æ–∑–¥–∞—é...
                  </>
                ) : (
                  <>
                    <Wand2 className="h-4 w-4 mr-2" />
                    –°–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–∫
                  </>
                )}
              </Button>
              
              <Button
                onClick={async () => {
                  try {
                    toast({
                      title: "üßπ –û—á–∏—Å—Ç–∫–∞...",
                      description: "–û—á–∏—â–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ –∑–∞–¥–∞—á–∏"
                    });
                    
                    const response = await supabase.functions.invoke('cleanup-stuck-tasks');
                    
                    if (response.error) {
                      throw new Error(response.error.message);
                    }
                    
                    toast({
                      title: "‚úÖ –ì–æ—Ç–æ–≤–æ",
                      description: `–û—á–∏—â–µ–Ω–æ: ${response.data?.totalCleaned || 0} –∑–∞–¥–∞—á`
                    });
                  } catch (error) {
                    toast({
                      title: "‚ùå –û—à–∏–±–∫–∞",
                      description: error.message,
                      variant: "destructive"
                    });
                  }
                }}
                variant="outline"
                size="lg"
                disabled={isGenerating}
              >
                <RefreshCw className="h-4 w-4" />
              </Button>
            </div>
          </div>

          {/* Lyrics Display */}
          {lyrics && !instrumental && (
            <div className="space-y-2 pt-4 border-t">
              <Label>–õ–∏—Ä–∏–∫–∞</Label>
              <Textarea
                value={lyrics}
                onChange={(e) => setLyrics(e.target.value)}
                rows={6}
                className="resize-none"
                placeholder="–õ–∏—Ä–∏–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –∑–¥–µ—Å—å..."
              />
            </div>
          )}

          {/* Model Selector */}
          <ModelSelector
            provider={provider}
            value={model}
            onChange={setModel}
          />
        </CardContent>
      </Card>
    </div>
  );
}